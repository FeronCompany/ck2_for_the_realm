activity_tournament = {
	expiration_days = 300
	has_activity_window = yes
	days_until_auto_start = 20
	color = { 0.853906 0.867188 0.105469 1 }
	valid = {
		activity_owner = {
			is_alive = yes
			is_imprisoned = no
			is_at_war = no
		}
	}
	on_spawn = {
		invite_character_to_activity = activity_owner
		accept_invitation_for_character = activity_owner
		
		activity_owner = {
			# Check for special guest and make sure they join the party; the acceptance was done in the interaction
			save_scope_as = host
			invite_special_guest_to_activity_effect = yes

			#Start by setting the "host spouse"
			if = {
				limit = {
					any_spouse = {
						is_landed = no
						is_available_adult = yes
					}
				}
				save_temporary_scope_as = tmp_host
				random_spouse = {
					limit = {
						this = scope:tmp_host.primary_spouse
						is_landed = no
						is_available_adult = yes
					}
					alternative_limit = {
						is_landed = no
						is_available_adult = yes
					}
					save_scope_as = spouse
				}
			}
			every_spouse = {
				limit = {
					is_available_for_activity_trigger = yes
					is_adult = yes
				}
				add_to_temporary_list = potential_guests
			}
			if = {
				limit = {
					exists = liege
					NOT = { liege = this }
					liege = {
						is_available_for_activity_trigger = yes
					}
				}
				liege = {
					add_to_temporary_list = potential_guests
				}
			}
			every_child = {
				limit = {
					is_available_for_activity_trigger = yes
					trigger_if = {
						limit = { exists = liege }
						liege = scope:activity.activity_owner
					}
					OR = {
						is_adult = yes
						is_landed = yes
					}
				}
				add_to_temporary_list = potential_guests
			}
			every_parent = {
				limit = {
					is_available_for_activity_trigger = yes
					trigger_if = {
						limit = { exists = liege }
						liege = scope:activity.activity_owner
					}
				}
				add_to_temporary_list = potential_guests
			}
			every_sibling = {
				limit = {
					is_available_for_activity_trigger = yes
					trigger_if = {
						limit = { exists = liege }
						liege = scope:activity.activity_owner
					}
					OR = {
						is_adult = yes
						is_landed = yes
					}
				}
				add_to_temporary_list = potential_guests
			}
			every_vassal = {
				limit = {
					is_available_for_activity_trigger = yes
				}
				add_to_temporary_list = potential_guests	
			}
			every_scheme = {
				limit = {
					OR = {
						scheme_type = courting
						scheme_type = befriend
						scheme_type = seduce
						scheme_type = sway
					}
					exists = scheme_target
					trigger_if = {
						limit = { exists = liege }
						scheme_target = { liege = scope:activity.activity_owner }
					}
				}
				scheme_target = {
					if = {
						limit = { is_available_for_activity_trigger = yes }
						add_to_temporary_list = potential_guests
					}
				}
			}
			
			every_in_list = {
				list = potential_guests
				scope:activity = {
					invite_character_to_activity = prev
				}
				if = { #Close relations
					limit = {
						is_close_or_extended_family_of = scope:activity.activity_owner
						has_any_scripted_relation = scope:activity.activity_owner
						is_consort_of = scope:activity.activity_owner
					}
					trigger_event = ftr_tournament.0003
				}
				else_if = { #Vassals
					limit = {
						target_is_liege_or_above = scope:activity.activity_owner
					}
					trigger_event = {
						id = ftr_tournament.0001
						days = 3
					}
				}
				else_if = { #Liege
					limit = {
						this = scope:activity.activity_owner.liege
					}
					trigger_event = {
						id = ftr_tournament.0002
						days = { 1 5 }
					}
				}
				else = { #Catch for anyone else
					trigger_event = ftr_tournament.0003
				}
			}
			# Add worriors into each group
			trigger_event = ftr_tournament.0007
		}
	}
	on_activate = {
		# If there are guests present
		activity_owner = { # The host gets their events
			# PreSend Close Event
			trigger_event = {
				id = ftr_tournament.0004
				days = 40
			}
		}
		every_participant = {
			#Remove blocker for invitations to activity
			remove_variable = booked_for_a_party
			#choose to be spectator or competitor
			trigger_event = {
				id = ftr_tournament.0005
				days = 1
			}
		}
	}
	on_complete = { # do nothing if not needed
		activity_owner = {
			target_weight_modifier_effect = {
				VALUE = hunt_weight_modifier_value
			}
		}
		every_participant = {
			limit = { NOT = { this = scope:activity.activity_owner } }
			trigger_event = ftr_tournament.0006
			target_weight_modifier_effect = {
				VALUE = hunt_weight_modifier_value
			}
		}
	}
	on_expire = { # Should never happen - kept as fallback for weirdness only
		activity_owner = {
			trigger_event = ftr_tournament.0008
		}
	}
	
	on_participant_death = {}

	on_invalidated = {
		every_participant = {
			limit = {
				NOT = { this = scope:host }
			}
			add_to_list = tournament_participants
		}
		complete_activity = yes
		if = {
			limit = {
				scope:host = {
					is_alive = no
				}
			}
			#Host died
			every_in_list = {
				list = tournament_participants
				trigger_event = {
					id = ftr_tournament.0009
					days = 2 #So you don't get spammed
				}
			}
		}
		else_if = {
			limit = {
				scope:host = {
					is_imprisoned = yes
				}
			}
			#Host has been imprisoned
			scope:host = {
				trigger_event = ftr_tournament.0010
			}
			every_in_list = {
				list = tournament_participants
				trigger_event = ftr_tournament.0011
			}
		}
		else_if = {
			limit = {
				scope:host = {
					is_at_war = yes
				}
			}
			#Host is in war
			scope:host = {
				trigger_event = ftr_tournament.0012
			}
			every_in_list = {
				list = tournament_participants
				trigger_event = ftr_tournament.0013
			}
		}
	}
}