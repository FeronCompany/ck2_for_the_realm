
######### Convert Bureacrat to Feudal ##########
ftr_convert_bureacrat_to_feudal_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	desc = ftr_convert_bureacrat_to_feudal_interaction_desc
	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:recipient = {
			is_vassal_of = scope:actor
			government_has_flag = government_is_centralism
		}
		scope:actor = {
			government_has_flag = government_is_centralism
			is_independent_ruler = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			NOT =  {
				is_at_war_with = scope:recipient
			}
		}
	}
	on_accept = {
		scope:actor = {
			add_prestige = -150
			save_scope_as = liege
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = ftr_grant_here_privilage_opinion
			}
			trigger_event = {
				id = ftr_realm_event.1003
			}
		}
	}
	on_decline = {}
	auto_accept = yes
	ai_will_do = {
		base = -40
		modifier = {
			add = 20
			scope:actor = {
				opinion = {
					target = scope:recipient
					value >= 50
				}
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				has_trait = generous
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				is_parent_of = scope:recipient
			}
		}
	}
}

######### Depose Bureacrat ##########
ftr_depose_bureacrat_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	desc = ftr_depose_bureacrat_interaction_desc
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	ai_maybe = yes
	can_send_despite_rejection = yes
	on_decline_summary = general_rebellion_decline_summary
	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_adult = yes
					is_physically_able = yes
					can_be_granted_titles_by = { RULER = scope:actor }
					NOT = { has_council_position = councillor_court_chaplain }
				}
				add_to_list = characters
			}
		}
		scope:recipient = {
			every_vassal = {
				limit = {
					primary_title.tier >= tier_county
					is_adult = yes
					is_physically_able = yes
					government_has_flag = government_is_centralism
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:recipient = {
			is_vassal_of = scope:actor
			government_has_flag = government_is_centralism
			primary_title.tier >= tier_county
		}
		scope:actor = {
			government_has_flag = government_is_centralism
			is_independent_ruler = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			is_at_war = no
		}
		scope:actor = {
			NOT =  {
				has_truce = scope:recipient
			}
		}
	}
	can_send = {
		scope:actor = {
			prestige >= 300
		}
	}
	on_accept = {
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:actor = {
			add_prestige = -300
			save_scope_as = liege
			scope:secondary_actor = {
				add_opinion = {
					target = scope:actor
					modifier = ftr_promote_me_opinion
				}
				save_scope_as = successor
			}
			scope:recipient = {
				add_opinion = {
					target = scope:actor
					modifier = ftr_depose_bureacrat_opinion
				}
				if = {
					limit = {
						scope:secondary_actor = { is_landed = no }
					}
					every_held_title = {
						limit = {
							tier >= tier_county
						}
						change_title_holder_include_vassals = {
							holder = scope:secondary_actor
							change = scope:change
						}
					}
				}
				else = {
					every_held_title = {
						limit = {
							tier = scope:recipient.primary_title.tier
						}
						change_title_holder_include_vassals = {
							holder = scope:secondary_actor
							change = scope:change
							government_base = scope:actor
						}
					}
					change_liege = {
						liege = scope:secondary_actor
						change = scope:change
					}
				}
				scope:recipient = {
					trigger_event = {
						id = ftr_realm_event.1004
						days = 1
					}
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		scope:secondary_actor = {
			change_government = centralism_government
			add_realm_law = autocracy_succession_law
			every_held_title = {
				limit = {
					tier > tier_county
				}
				add_title_law = bureacratic_succession_law
			}
		}
	}
	on_auto_accept = {}
	on_decline = {
		ftr_war_for_depose_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}
	auto_accept = {
		scope:recipient = {
			calc_true_if = {
				amount >= 1
				custom_description = {
					text = "baron_revocation"
					highest_held_title_tier = tier_barony
				}
				custom_description = {
					text = "prisoner_revocation"
					is_imprisoned_by = scope:actor
				}
				custom_description = {
					text = "foreign_prison_revocation"
					subject = scope:actor
					object = scope:recipient
					scope:recipient = {
						is_imprisoned = yes
						NOT = { is_imprisoned_by = scope:actor }
					}
				}
			}
		}
	}
	ai_will_do = {
		base = 0
		modifier = {
			add = 10
			scope:actor = {
				opinion = {
					target = scope:recipient
					value <= 0
				}
			}
		}
		modifier = {
			add = -100
			OR = {
				scope:actor = {
					opinion = {
						target = scope:recipient
						value > 10
					}
				}
				scope:recipient = {
					opinion = {
						target = scope:actor
						value >= 30
					}
				}
			}
		}
		modifier = {
			add = 10
			scope:recipient = {
				opinion = {
					target = scope:actor
					value < 30
				}
			}
		}
		modifier = {
			add = -10
			scope:secondary_actor = {
				is_landed = no
			}
		}
		modifier = {
			add = 40
			scope:actor = {
				OR = {
					has_imprisonment_reason = scope:recipient
					has_revoke_title_reason = scope:recipient
				}
			}
		}
		opinion_modifier = {
			opinion_target = scope:actor
			who = scope:secondary_actor
			multiplier = 0.1
		}
		opinion_modifier = {
			opinion_target = scope:secondary_actor
			who = scope:actor
			multiplier = 0.1
		}
	}
	ai_accept = {
		base = 0

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}

		modifier = {
			add = -20
			scope:secondary_actor = {
				is_landed = no
			}
			desc = FTR_DEPOSE_LOST_EVERYTHING
		}

		modifier = {
			add = 10
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = trusting
			}
			desc = TAKE_THE_VOWS_TRUSTING
		}
		
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = content
			}
			desc = INTERACTION_CONTENT
		}
		
		modifier = {
			add = 20
			scope:actor.current_military_strength > scope:recipient.current_military_strength
			scope:recipient = {
				has_trait = craven
			}
			desc = INTERACTION_CRAVEN
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -1
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.3
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -40
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
				subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
				}
				multiply = 50
				max = 20
	  		}
		}
		modifier = { # Legalistic tradition
			desc = tradition_legalistic_name
			scope:actor = {
				has_revoke_title_reason = scope:recipient
				culture = { has_cultural_parameter = vassals_more_likely_accept_punishments }
			}
			add = legalistic_vassal_punishment_acceptance
		}
	}
}

######### Request Depose Bureacrat ##########
ftr_request_depose_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	cooldown = { years = 2 }
	ai_frequency = 24
	ai_targets = {
		ai_recipients = vassals
	}
	desc = ftr_request_depose_interaction_desc
	greeting = positive
	notification_text = ftr_request_depose_interaction_text
	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_adult = yes
					is_physically_able = yes
					can_be_granted_titles_by = { RULER = scope:actor }
					NOT = { has_council_position = councillor_court_chaplain }
				}
				add_to_list = characters
			}
		}
		scope:secondary_recipient = {
			every_vassal = {
				limit = {
					primary_title.tier >= tier_county
					is_adult = yes
					is_physically_able = yes
					government_has_flag = government_is_centralism
				}
				add_to_list = characters
			}
		}
	}

	populate_recipient_list = {
		scope:actor = {
			every_vassal = {
				limit = {
					primary_title.tier >= tier_county
					government_has_flag = government_is_centralism
				}
				add_to_list = characters
			}
		}
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		scope:actor.top_liege = {
			save_scope_as = recipient
		}
	}
	is_shown = {
		scope:actor = {
			#government_has_flag = government_is_centralism
			is_independent_ruler = no
			primary_title.tier > tier_county
		}
		scope:secondary_recipient = {
			is_vassal_of = scope:actor
			government_has_flag = government_is_centralism
			primary_title.tier >= tier_county
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			is_at_war = no
		}
		scope:recipient = {
			is_at_war = no
		}
	}
	can_send = {
		scope:actor = {
			prestige >= 250
		}
	}
	on_accept = {
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:actor = {
			add_prestige = -250
			scope:secondary_actor = {
				add_opinion = {
					target = scope:actor
					modifier = ftr_promote_me_opinion
				}
			}
			scope:secondary_recipient = {
				add_opinion = {
					target = scope:actor
					modifier = ftr_depose_bureacrat_opinion
				}
				if = {
					limit = {
						scope:secondary_actor = { is_landed = no }
					}
					every_held_title = {
						limit = {
							tier >= tier_county
						}
						change_title_holder_include_vassals = {
							holder = scope:secondary_actor
							change = scope:change
						}
					}
				}
				else = {
					every_held_title = {
						limit = {
							tier = scope:secondary_recipient.primary_title.tier
						}
						change_title_holder_include_vassals = {
							holder = scope:secondary_actor
							change = scope:change
						}
					}
					change_liege = {
						liege = scope:secondary_actor
						change = scope:change
					}
				}
				scope:secondary_recipient = {
					trigger_event = {
						id = ftr_realm_event.1004
						days = 1
					}
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		scope:secondary_actor = {
			change_government = centralism_government
			add_realm_law = autocracy_succession_law
			every_held_title = {
				limit = {
					tier > tier_county
				}
				add_title_law = bureacratic_succession_law
			}
		}
	}
	on_auto_accept = {}
	on_decline = {
		scope:actor = {
			add_opinion = {
				target = scope:recipient
				modifier = ftr_refuse_depose_bureacrat_opinion
			}
		}
	}
	ai_accept = {
		base = -30
		opinion_modifier = {
			opinion_target = scope:actor
			who = scope:recipient
			multiplier = 0.4
		}
		opinion_modifier = {
			opinion_target = scope:secondary_actor
			who = scope:recipient
			multiplier = 0.2
		}
		opinion_modifier = {
			opinion_target = scope:secondary_recipient
			who = scope:recipient
			multiplier = -0.2
		}
		modifier = {
			add = {
				value = 20
				multiply = scope:secondary_recipient.num_sinful_traits
			}
			scope:secondary_recipient.num_sinful_traits > 0
			desc = DEPOSE_TARGET_SIN
		}
		modifier = {
			add = 50
			scope:actor = {
				has_imprisonment_reason = scope:secondary_recipient
			}
			desc = DEPOSE_TARGET_IMPRISON
		}
	}
	#auto_accept = yes
	ai_will_do = {
		base = -20
		modifier = {
			add = 10
			scope:actor = {
				opinion = {
					target = scope:secondary_recipient
					value <= 0
				}
			}
		}
		modifier = {
			add = -100
			OR = {
				scope:actor = {
					opinion = {
						target = scope:secondary_recipient
						value > 10
					}
				}
				scope:secondary_recipient = {
					opinion = {
						target = scope:actor
						value >= 30
					}
				}
			}
		}
		modifier = {
			add = 10
			scope:secondary_recipient = {
				opinion = {
					target = scope:actor
					value <= 20
				}
			}
		}
		modifier = {
			add = 50
			scope:actor = {
				has_imprisonment_reason = scope:secondary_recipient
			}
		}
		opinion_modifier = {
			opinion_target = scope:actor
			who = scope:secondary_actor
			multiplier = 0.1
		}
		opinion_modifier = {
			opinion_target = scope:secondary_actor
			who = scope:actor
			multiplier = 0.1
		}
	}
}

######### Vassal War Mediation ##########
ftr_vassal_mediation_interaction = {
	category = interaction_category_vassal
	interface = interfere_in_war
	special_interaction = interfere_in_war_interaction
	ai_accept_negotiation = yes
	popup_on_receive = yes
	pause_on_receive = yes
	desc = ftr_vassal_mediation_interaction_desc

	is_shown = {
		scope:recipient = {
			is_vassal_of = scope:actor
			is_at_war = yes
			any_character_war = {
				OR = {
					primary_attacker = scope:recipient
					primary_defender = scope:recipient
				}
				save_temporary_scope_as = target_war
			}
		}
		scope:actor = {
			government_has_flag = government_is_centralism
			NOT = { is_participant_in_war = scope:target_war }
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			NOT = {
				any_war_enemy = {
					this = scope:actor
				}
			}
		}
	}
	can_be_picked = {
		OR = {
			scope:target.primary_attacker = scope:recipient
			scope:target.primary_defender = scope:recipient
		}
	}
	on_accept = {
		scope:actor = {
			add_prestige = -150
		}
		scope:recipient = {
			trigger_event = ftr_interaction_event.1001
		}
	}
	on_auto_accept = {}
	on_decline = {}
	auto_accept = yes
	ai_will_do = {
		base = 100
	}
}

###### COUP INTERACTION ######
ftr_coup_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	desc = ftr_coup_interaction_desc
	cooldown_against_recipient = { years = 10 }
	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			OR = {
				is_vassal_of = scope:recipient
				is_courtier_of = scope:recipient
			}
			OR = {
				is_child_of = scope:recipient
				is_grandchild_of = scope:recipient
				is_great_grandchild_of = scope:recipient
				is_sibling_of = scope:recipient
				scope:recipient.primary_title = {
					scope:actor = {
						has_claim_on = prev
					}
				}
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			is_imprisoned = no
			OR = {
				is_independent_ruler = yes
				AND = {
					is_independent_ruler = no
					NOT = { government_has_flag = government_is_centralism }
				}
			}
		}
		scope:actor = {
			is_imprisoned = no
		}
	}
	on_accept = {
		scope:actor = {
			send_interface_toast = {
				title = ftr_coup_interaction_notification
				left_icon = scope:actor					
				right_icon = scope:recipient
				start_scheme = {
					type = coup
					target = scope:recipient
				}
				stress_impact = {
					compassionate = medium_stress_impact_gain
					just = minor_stress_impact_gain
					humble = minor_stress_impact_gain
					honest = minor_stress_impact_gain
					craven = medium_stress_impact_gain
					ambitious = medium_stress_impact_loss
					callous = minor_stress_impact_loss
				}
			}
			set_variable = {
				name = ftr_coup_method
				# 0-force attack; 1-infiltrate; 2-use trap
				value = 0
				days = 365
			}
		}
		hidden_effect = {
			scope:recipient = {
				random = {
					chance = 10
					modifier = {
						add = scope:recipient.intrigue
					}
					trigger_event = {
						id = ftr_coup_ongoing.2005
						days = 5
					}
				}
			}
		}
	}
	on_auto_accept = {}
	on_decline = {}
	auto_accept = yes
	ai_will_do = {
		base = -30
		modifier = {
			add = 20
			scope:actor = {
				opinion = {
					target = scope:recipient
					value <= 50
				}
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				OR = {
					has_trait = ambitious
					has_trait = deceitful
					has_trait = impatient
					has_trait = paranoid
					has_trait = callous
				}
			}
		}
		modifier = {
			add = -10
			scope:actor = {
				OR = {
					has_trait = content
					has_trait = honest
					has_trait = patient
					has_trait = trusting
					has_trait = compassionate
					has_trait = craven
				}
			}
		}
		modifier = {
			add = 10
			scope:recipient = {
				opinion = {
					target = scope:actor
					value < 30
				}
			}
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_imprisonment_reason = scope:actor
			}
		}
	}
}

######### Fine ##########
ftr_fine_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	greeting = positive
	notification_text = ftr_fine_interaction_text
	desc = ftr_fine_interaction_desc
	ai_frequency = 12

	is_shown = {
		scope:recipient = {
			is_vassal_of = scope:actor
		}
		scope:actor = {
			has_imprisonment_reason = scope:recipient
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			NOT = {
				is_at_war_with = scope:actor
			}
			is_imprisoned = no
		}
		scope:actor = {
			is_imprisoned = no
		}
	}
	
	on_accept = {
		scope:recipient = {
			pay_short_term_gold = {
				target = scope:actor
				gold = ftr_fine_gold_value
			}
		}
		consume_all_criminal_reasons_effect = {
			LIEGE = scope:actor
			CRIMINAL = scope:recipient
		}
		hidden_effect = {
			scope:actor = {
				send_interface_toast = {
					title = ftr_fine_accept_notification
					left_icon = scope:actor					
					right_icon = scope:recipient
					show_as_tooltip = {
						scope:recipient = {
							pay_short_term_gold = {
								target = scope:actor
								gold = ftr_fine_gold_value
							}
						}
					}
				}
			}
		}
	}
	ai_accept = {
		base = -20
		modifier = {
			add = -30
			scope:recipient = {
				gold < ftr_fine_gold_value
			}
			desc = FTR_FINE_GOLD_NOT_ENOUGH
		}
		modifier = {
			add = 20
			scope:recipient = {
				OR = {
					has_trait = craven
					has_trait = calm
					has_trait = humble
					has_trait = shrewd
					has_trait = loyal
				}
			}
			desc = FTR_FINE_TRAIT
		}
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
		}
	}
	on_auto_accept = {}
	on_decline = {}
	#auto_accept = yes
	ai_will_do = {
		base = 0
		modifier = {
			add = -50
			scope:recipient = {
				gold < ftr_fine_gold_value
			}
		}
		modifier = { # I need money
			add = 20
			scope:recipient = {
				gold <= 200
			}
		}
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
		}
		modifier = { # As reasonable liege, fine a powerful vassal is better than arrest
			add = 10
			scope:recipient = {
				is_powerful_vassal = yes
			}
			scope:actor = {
				OR = {
					has_trait = craven
					has_trait = calm
				}
			}
		}
		modifier = { # As ambitious liege, fine powerful vassal is not enough
			add = -50
			scope:recipient = {
				is_powerful_vassal = yes
			}
			scope:actor = {
				OR = {
					has_trait = callous
					has_trait = sadistic
					has_trait = arbitrary
					has_trait = arrogant
					has_trait = ambitious
				}
			}
		}
	}
}

######### Transform Warlord to Bureaucrat ##########
ftr_transform_warlord_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	desc = ftr_transform_warlord_interaction_desc
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	ai_maybe = yes
	can_send_despite_rejection = yes
	on_decline_summary = general_rebellion_decline_summary
	
	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:recipient = {
			is_vassal_of = scope:actor
			government_has_flag = government_is_warlord
			primary_title.tier >= tier_county
		}
		scope:actor = {
			government_has_flag = government_is_centralism
			is_independent_ruler = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			is_at_war = no
		}
		scope:actor = {
			NOT =  {
				has_truce = scope:recipient
			}
		}
	}
	can_send = {
		scope:actor = {
			prestige >= 300
		}
	}
	on_accept = {
		scope:recipient = {
			change_government = centralism_government
			add_realm_law = autocracy_succession_law
			every_held_title = {
				if = {
					limit = { tier >= tier_duchy }
					clear_title_laws = yes
					add_title_law = bureacratic_succession_law
				}
			}
		}
	}
	on_auto_accept = {}
	on_decline = {
		ftr_war_for_depose_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}
	auto_accept = {
		scope:recipient = {
			calc_true_if = {
				amount >= 1
				custom_description = {
					text = "prisoner_revocation"
					is_imprisoned_by = scope:actor
				}
				custom_description = {
					text = "foreign_prison_revocation"
					subject = scope:actor
					object = scope:recipient
					scope:recipient = {
						is_imprisoned = yes
						NOT = { is_imprisoned_by = scope:actor }
					}
				}
			}
		}
	}
	ai_will_do = {
		base = 0
		modifier = {
			add = -40
			scope:actor = {
				is_at_war = yes
			}
		}
		modifier = {
			add = -20
			scope:actor = {
				OR = {
					has_trait = content
					has_trait = humble
					has_trait = craven
				}
			}
		}
		modifier = { #Comparative military strength.
	  	  	add = {
				value = 1
				subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
				}
				multiply = 50
				max = 100
	  		}
		}
		modifier = {
			add = 20
			scope:actor = {
				OR = {
					has_trait = ambitious
					has_trait = brave
					has_trait = arrogant
				}
			}
		}
		modifier = {
			add = -10
			scope:recipient = {
				OR = {
					has_trait = ambitious
					has_trait = brave
					has_trait = arrogant
				}
			}
		}
		modifier = {
			add = 10
			scope:recipient = {
				OR = {
					has_trait = content
					has_trait = humble
					has_trait = craven
				}
			}
		}
	}
	ai_accept = {
		base = -20

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}

		modifier = {
			add = -20
			scope:actor = {
				is_at_war = yes
			}
			desc = FTR_LIEGE_IS_AT_WAR
		}

		modifier = {
			add = 10
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		
		modifier = {
			add = 10
			scope:recipient = {
				has_trait = trusting
			}
			desc = TAKE_THE_VOWS_TRUSTING
		}
		
		modifier = {
			add = 10
			scope:recipient = {
				has_trait = content
			}
			desc = INTERACTION_CONTENT
		}
		
		modifier = {
			add = 10
			scope:actor.current_military_strength > scope:recipient.current_military_strength
			scope:recipient = {
				has_trait = craven
			}
			desc = INTERACTION_CRAVEN
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -1
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.3
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -40
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
				subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
				}
				multiply = 50
				max = 20
	  		}
		}
	}
}
