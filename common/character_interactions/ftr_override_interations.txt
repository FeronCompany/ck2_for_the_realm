
# ==OVERRIDE==
liege_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes
	icon = icon_contract_modification_single

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_VASSAL
	
	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			exists = liege
			liege = scope:actor
			is_ruler = yes
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { 
			is_busy_in_events_localised = yes
		} 
		NOT = { scope:actor = { is_at_war_with = scope:recipient } } 
	}

	can_send = {
		trigger_if = { #If they're blocked we don't want to show anything else
			limit = {
				scope:recipient = {
					vassal_contract_is_blocked_from_modification = yes
				}
			}
			scope:recipient = {
				vassal_contract_is_blocked_from_modification = no
			}
		}
		trigger_else = {
			scope:actor = {
				has_changed_contract_obligation_trigger = { WHO = scope:recipient }
				
				custom_description = {
					text = "liege_modify_vassal_contract_cannot_exceed_tyranny_cap"
					object = scope:actor
					NOT = {
						vassal_obligation_increase_tyranny_gain_multiplier > 1
					}
				}

				# If the trade without the hook usage is already in the vassal's favour or fair then don't waste your hook
				save_temporary_scope_value_as = {
					name = obligations_favoring_vassal
					value = scope:recipient.count_obligation_improvements_for_vassal
				}
				trigger_if = {
					limit = { scope:obligations_favoring_vassal > 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_vassal_favor"
						object = scope:recipient
						value = scope:obligations_favoring_vassal
						NOT = { always = scope:hook }
					}
				}
				trigger_else_if = {
					limit = { scope:obligations_favoring_vassal = 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_equal"
						object = scope:recipient
						NOT = { always = scope:hook }
					}
				}
				trigger_else = {} # Otherwise we're fine!
			}
				
			# Cannot change more than three things at once
			custom_description = {
				text = "vassal_modify_vassal_contract_obligation_change_limit"
				value = scope:recipient.count_total_obligation_changes
				scope:recipient.count_total_obligation_changes <= max_contract_changes
			}
		}
	}

	auto_accept = yes
	on_accept = {
		hidden_effect = {
			# Struggle Catalysts
			## We work these out first so they're not invalidated by the actual effect block.
			if = {
				limit = {
					catalyst_granted_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_granted_powerful_diff_faith_vassal_religious_protection
							character = scope:actor
						}
					}
				}
			}
			if = {
				limit = {
					catalyst_revoked_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
							character = scope:actor
						}
					}
				}
			}

			# Improving contract catalyst
			if = {
				limit = {
					scope:recipient.count_obligation_improvements_for_vassal > 0
					is_diff_faith_or_culture_trigger = {
						CHAR = scope:recipient
						STATUS = involved
						STRUGGLE_TYPE = iberian_struggle
					}
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_grant_privilege_to_diff_faith_culture_vassal
							character = scope:actor
						}
					}
				}
			}
		}

		# Enact changes.
		scope:actor = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:recipient
				# Add tyranny for each level increased. Can spend one hook to avoid one level of tyranny hit.
				add_tyranny = vassal_obligation_increase_tyranny_gain
				if = {
					limit = { vassal_obligation_increase_tyranny_gain != 0 }
					stress_impact = {
						just = medium_stress_impact_gain
						generous = medium_stress_impact_gain
					}
				}
				if = {
					limit = {
						always = scope:hook
					}
					use_hook = scope:recipient
					add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}

				scope:recipient = {
					hidden_effect = { set_vassal_contract_modification_blocked = yes }
					
					if = {
						limit = { has_government = feudal_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_taxes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_levies }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
					}
					#  ==OVERRIDE==
					if = {
						limit = { has_government = centralism_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = centralism_government_taxes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = centralism_government_levies }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = centralism_special_contract }
					}
					if = {
						limit = { has_government = clan_government}
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = iqta_special_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = ghazi_special_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = marriage_favor_rights }
					}
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = special_contract }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = religious_rights }

					set_obligation_if_changed_effect = { OBLIGATION_TYPE = war_declaration_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = council_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = title_revocation_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = jizya_special_rights }
				}
			}
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}

vassal_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = vassal_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_LIEGE

	redirect = {
		# need to reverse the role for the UI to work properly
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		scope:actor = {
			save_scope_as = recipient
		}

		scope:secondary_recipient = {
			save_scope_as = actor
		}
	}

	is_shown = {
		scope:recipient = {
			is_independent_ruler = no
			NOT = { this = scope:actor }
			liege = scope:actor
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = { is_busy_in_events_localised = yes }
		NOT = { scope:recipient = { is_at_war_with = scope:actor } }
	}

	can_send = {
		trigger_if = { #If you're blocked we don't want to show anything else
			limit = {
				scope:recipient = {
					vassal_contract_is_blocked_from_modification = yes
				}
			}
			scope:recipient = {
				vassal_contract_is_blocked_from_modification = no
			}
		}
		trigger_else = {
			scope:recipient = {
				has_changed_contract_obligation_trigger = { WHO = scope:recipient }
				
				# Must be an even trade overall
				custom_description = {
					text = "vassal_modify_vassal_contract_cannot_increase_obligation_level"
					object = scope:actor
					value = count_obligation_improvements_for_vassal_include_hook
					count_obligation_improvements_for_vassal_include_hook = 0
				}
				
				# Cannot change more than three things at once
				custom_description = {
					text = "vassal_modify_vassal_contract_obligation_change_limit"
					value = count_total_obligation_changes
					count_total_obligation_changes <= max_contract_changes
				}
			}
		}
	}

	auto_accept = yes

	on_accept = {
		# Enact changes.
		scope:recipient = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:actor
				if = {
					limit = { always = scope:hook }
					use_hook = scope:actor
					add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}

				hidden_effect = { set_vassal_contract_modification_blocked = yes }

				if = {
					limit = { has_government = feudal_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_levies }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
				}
				#  ==OVERRIDE==
				if = {
					limit = { has_government = centralism_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = centralism_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = centralism_government_levies }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = centralism_special_contract }
				}
				if = {
					limit = { has_government = clan_government}
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = iqta_special_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = ghazi_special_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = marriage_favor_rights }
				}
				set_obligation_if_changed_effect = { OBLIGATION_TYPE = special_contract }
				set_obligation_if_changed_effect = { OBLIGATION_TYPE = religious_rights }

				set_obligation_if_changed_effect = { OBLIGATION_TYPE = war_declaration_rights }
				set_obligation_if_changed_effect = { OBLIGATION_TYPE = council_rights }
				set_obligation_if_changed_effect = { OBLIGATION_TYPE = title_revocation_rights }
				set_obligation_if_changed_effect = { OBLIGATION_TYPE = jizya_special_rights }
			}
		}

		hidden_effect = {
			# Struggle Catalysts
			## We work these out first so they're not invalidated by the actual effect block.
			if = {
				limit = {
					catalyst_granted_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_granted_powerful_diff_faith_vassal_religious_protection
							character = scope:recipient
						}
					}
				}
			}
			# Improving contract catalyst
			if = {
				limit = {
					scope:recipient.count_obligation_improvements_for_vassal > 0
					is_diff_faith_or_culture_trigger = {
						CHAR = scope:recipient
						STATUS = involved
						STRUGGLE_TYPE = iberian_struggle
					}
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_grant_privilege_to_diff_faith_culture_vassal
							character = scope:actor
						}
					}
				}
			}
		}
	}

	send_option = {
		is_valid = {
			scope:recipient = {
				has_usable_hook = scope:actor
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:recipient = { has_usable_hook = scope:actor }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no
}

revoke_title_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	highlighted_reason = HIGHLIGHTED_HAS_REVOKE_TITLE_REASON
	notification_text = REVOKE_TITLE_PROPOSAL

	desc = revoke_title_interaction_desc

	special_interaction = revoke_title_interaction
	interface = revoke_title
	target_type = title
	target_filter = recipient_domain_titles
	ai_maybe = yes
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	icon = revoke_title

	interface_priority = 60
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	on_decline_summary = general_rebellion_decline_summary

	# actor character giving the titles
	# recipient character receiving the titles

	is_shown = {
		scope:recipient = {
			is_landed = yes
			# should be shown but be disabled for indirect vassals
			target_is_liege_or_above = scope:actor
			# is_vassal_of = scope:actor
		}
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			NOR =  {
				is_at_war_with = scope:recipient
				has_truce = scope:recipient
			}
			custom_description = {
				text = "character_interactions_revoke_title_from_ally_without_reason"
				object = scope:recipient
				OR = {
					NOT = {
						is_allied_to = scope:recipient
					}
					has_revoke_title_reason = scope:recipient
				}
			}
			trigger_if = {
				limit = { has_government = tribal_government }
				custom_description = {
					text = "has_law_allowing_title_revocation_tribal"
					has_realm_law_flag = title_revocation_allowed
				}
			}
			trigger_if = {
				limit = {
					NOT = { has_government = tribal_government }
				}
				custom_description = {
					text = "has_law_allowing_title_revocation_crown"
					has_realm_law_flag = title_revocation_allowed
				}
			}
			trigger_if = {
				limit = {
					scope:recipient = {
						vassal_contract_has_flag = vassal_contract_cannot_revoke_titles
					}
				}
				custom_description = {
					text = vassal_contract_forbids_revocation
					scope:recipient = {
						NOT = { vassal_contract_has_flag = vassal_contract_cannot_revoke_titles }
					}
				}
			}
		}
		scope:recipient = {
			is_vassal_of = scope:actor
			is_busy_in_events_localised = yes
			NOT = { has_strong_hook = scope:actor }
		}

		###### OVERRIDE START #####
		custom_description = {
			text = official_cannot_revok_other_officials_text
			NOT = {
				AND = {
					scope:actor = {
						is_independent_ruler = no
					}
					scope:recipient = {
						has_government = centralism_government
						primary_title.tier >= tier_county
					}
				}
			}
		}
		###### OVERRIDE END #####
	}

	can_send = {
		scope:actor = {
			custom_description = {
				text = "character_interactions_hostile_actions_disabled_delay"
				NOT = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
		}
	}
	
	# Highlighted in the interaction menu when right-clicking a character
	is_highlighted = {
		OR = {
			scope:actor = {
				has_revoke_title_reason = scope:recipient
			}
			scope:recipient = {
			 	any_held_title = {
					scope:actor = {
						has_claim_on = prev
					}
				}
				NOT = {
					any_ally = {
						this = scope:actor
					}
				}
			}
		}
	}
		
	can_be_picked_title = {
		scope:target = {
			is_contested = no
			NOT = {
				recent_history = {
					type = granted
					years = 1
				}
			}
			custom_description = {
				text = "character_interactions_not_rel_head_title"
				is_head_of_faith = no
			}
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0200
		}
	}

	on_accept = {
		revoke_title_interaction_effect = yes

		save_scope_value_as = {
			name = revoke_title_interaction
			value = yes
		}
		
		scope:actor = {
			trigger_event = char_interaction.0199
		}

		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}

		# For revoking titles of character's imprisoned abroard who have lost a revocation war
		hidden_effect = {
			scope:actor = {
				if = {
					limit = {
						has_opinion_modifier = {
							target = scope:recipient
							modifier = foreign_prison_revocation_opinion
						}
					}
					remove_opinion = {
						target = scope:recipient
						modifier = foreign_prison_revocation_opinion
					}
				}
			}
		}
	}

	on_decline = {
		if = {
			limit = {
				scope:landed_title.tier != tier_barony
			}
			scope:actor = {
				revocation_tyranny_effect = yes
				title_revocation_stress_effect = yes
			}
		}
		war_for_revoke_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	auto_accept = {
		scope:recipient = {
			calc_true_if = {
				amount >= 1
				custom_description = {
					text = "baron_revocation"
					highest_held_title_tier = tier_barony
				}
				custom_description = {
					text = "prisoner_revocation"
					is_imprisoned_by = scope:actor
				}
				custom_description = {
					text = "spending_hook"
					subject = scope:actor
					object = scope:recipient
					scope:hook = yes
					scope:actor = { has_strong_hook = scope:recipient }
				}
				custom_description = {
					text = "foreign_prison_revocation"
					subject = scope:actor
					object = scope:recipient
					scope:recipient = {
						is_imprisoned = yes
						NOT = { is_imprisoned_by = scope:actor }
					}
					scope:actor = {
						has_opinion_modifier = {
							target = scope:recipient
							modifier = foreign_prison_revocation_opinion
						}
					}
				}
			}
		}
	}
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = trusting
			}
			desc = TAKE_THE_VOWS_TRUSTING
		}
		
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = content
			}
			desc = INTERACTION_CONTENT
		}
		
		modifier = {
			add = 20
			scope:actor.current_military_strength > scope:recipient.current_military_strength
			scope:recipient = {
				has_trait = craven
			}
			desc = INTERACTION_CRAVEN
		}
		
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL
		}
		
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			NOR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			scope:landed_title.de_jure_liege = scope:actor.primary_title.title_capital_county.de_jure_liege
			add = 30
			desc = AI_TITLE_IS_IN_CAPITAL_DUCHY
		}
		
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:landed_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}
		modifier = { #Title is part of vassal's primary title de-jure.
			add = -25
			scope:recipient.primary_title.tier > tier_county
			OR = {
				scope:recipient.primary_title = {
					is_de_jure_liege_or_above_target = scope:landed_title
				}
				scope:recipient.primary_title = scope:landed_title
			}
			desc = AI_REFUSAL_IS_DE_JURE_UNDER
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
				subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
				}
				multiply = 50
				max = 20
	  		}
		}
		modifier = { # Legalistic tradition
			desc = tradition_legalistic_name
			scope:actor = {
				has_revoke_title_reason = scope:recipient
				culture = { has_cultural_parameter = vassals_more_likely_accept_punishments }
			}
			add = legalistic_vassal_punishment_acceptance
		}
		modifier = { # AI Mongols, tyranny wars just delay the inevitable fun!
			scope:actor = {
				is_ai = yes
				OR = {
					has_trait = greatest_of_khans
					has_character_modifier = the_great_khan_modifier
				}
			}
			scope:recipient = {
				is_ai = yes
			}
			add = 500
		}
	}

	# AI
	ai_targets = {
		ai_recipients = vassals
	}
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	ai_potential = {
		has_realm_law_flag = title_revocation_allowed
		primary_title.tier > tier_county
	}

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = {
						title_revocation_is_tyrannical_trigger = yes
					}
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			years_from_game_start >= 3
			OR = {
				scope:actor = {
					is_at_war = no
					gold > 0
				}
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = { # The HRE doesn't need endless civil wars
				NOT = {
					primary_title = title:e_hre
				}
			}
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			NAND = { # Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
				scope:landed_title.holder = {
					is_ai = no
				}
				scope:actor = {
					title_revocation_is_tyrannical_trigger = yes
				}
			}
			##### OVERRIDE START #####
			add = 300
			##### OVERRIDE END #####
		}
		# If below domain limit, try to revoke counties in your capital duchy despite tyranny, sometimes
		modifier = {
			years_from_game_start >= 3
			OR = {
				scope:actor = {
					is_at_war = no
					gold > 0
				}
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = { # The HRE doesn't need endless civil wars
				NOT = {
					primary_title = title:e_hre
				}
			}
			scope:actor.domain_size < scope:actor.domain_limit
			scope:actor.primary_title.tier > tier_county
			trigger_if = {
				limit = {
					scope:actor = {
						title_revocation_is_tyrannical_trigger = yes
						domain_size > 3
					}
				}
				scope:actor = {
					NOR = {
						has_trait = generous
						has_trait = just
					}
				}
			}
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:actor.primary_title.title_capital_county.holder = scope:actor # You have your de jure capital already
				NOT = {
					scope:actor.primary_title.title_capital_county.holder.top_liege = scope:actor.top_liege # Or your De Jure capital isn't in your realm
				}
			}
			scope:landed_title.tier = tier_county # Only Counties
			OR = { # The AI gives away wrong-holding counties almost instantly, so we restrict to counties with holdings they can hold
				scope:landed_title.title_province = { has_holding_type = castle_holding } # Everyone is valid for castles
				AND = {
					scope:actor = {
						has_government = tribal_government
					}
					scope:landed_title.title_province = { has_holding_type = tribal_holding }
				}
				AND = {
					scope:actor = {
						has_government = republic_government
					}
					scope:landed_title.title_province = { has_holding_type = city_holding }
				}
				AND = {
					scope:actor = {
						OR = {
							has_government = clan_government
							has_government = theocracy_government
						}
					}
					scope:landed_title.title_province = { has_holding_type = church_holding }
				}
			}
			OR = { # And the capital duchy, if it exists at all
				AND = {
					exists = scope:actor.primary_title.title_capital_county.de_jure_liege.holder
					scope:actor.primary_title.title_capital_county.de_jure_liege.holder = scope:actor
				}
				AND = {
					exists = scope:actor.primary_title.title_capital_county.de_jure_liege.holder
					NOT = {
						scope:actor.primary_title.title_capital_county.de_jure_liege.holder.top_liege = scope:actor.top_liege
					}
				}
				scope:actor.primary_title.title_capital_county.de_jure_liege = {
					is_title_created = no
				}
			}
			
			scope:landed_title.de_jure_liege = scope:actor.primary_title.title_capital_county.de_jure_liege # Under the same Duchy as your capital
			
			scope:recipient = { # Not from players
				is_ai = yes
			}
			
			OR = { # Tyranny tolerance is based on rationality
				AND = {
					scope:actor.ai_rationality < 0
					scope:actor.tyranny <= 15 # Don't go crazy with tyranny, just a bit is fine
				}
				AND = {
					scope:actor.ai_rationality >= 0
					scope:actor.ai_rationality < 50
					scope:actor.tyranny <= 5 # Don't go crazy with tyranny, just a bit is fine
				}
				AND = {
					scope:actor.ai_rationality >= 50
					scope:actor.tyranny <= 0 # Don't go crazy with tyranny, just a bit is fine
				}
				AND = {
					scope:actor.ai_rationality >= 0
					scope:recipient = {
						is_imprisoned_by = scope:actor
					}
					scope:actor = { has_revoke_title_reason = scope:recipient }
				}
				AND = {
					scope:actor.ai_rationality < 0
					scope:recipient = {
						is_imprisoned_by = scope:actor
					}
				}
			}
			# To do this, the target must be weak or willing in some way
			OR = {
				scope:actor.current_military_strength > scope:recipient.current_military_strength # Must be stronger
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:recipient = {
				OR = {
					AND = {
						scope:recipient.primary_title.tier <= tier_county
						scope:actor.primary_title.tier >= tier_duchy
					}
					has_trait = craven
					has_trait = content
					has_trait = trusting
					has_dread_level_towards = {
						target = scope:actor
						level >= 1
					}
					opinion = { target = scope:actor value >= 40 }
					is_imprisoned_by = scope:actor
					scope:actor = { has_revoke_title_reason = scope:recipient }
				}
			}
			
			##### OVERRIDE START #####
			add = 500
			##### OVERRIDE END #####
		}
		# Revoke counties we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:landed_title.tier = tier_county
			scope:landed_title.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke appropriate baronies if below domain limit, it's tyranny free
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:recipient = { highest_held_title_tier = tier_barony }
			scope:landed_title.tier = tier_barony
			OR = {
				scope:landed_title.title_province = { has_holding_type = castle_holding }
				AND = {
					OR = {
						scope:actor = { has_government = clan_government }
						scope:actor = { has_government = theocracy_government }
					}
					scope:landed_title.title_province = { has_holding_type = church_holding }
				}
				AND = {
					scope:actor = { has_government = republic_government }
					scope:landed_title.title_province = { has_holding_type = city_holding }
				}
			}
			add = 1100
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = {
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			OR = { # Chill a bit until you've dealth with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = {
			add = scope:landed_title.tier
		}
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_parent_of = scope:recipient
					is_grandparent_of = scope:recipient
					is_great_grandparent_of = scope:recipient
				}
			}
			add = -5000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOR = {
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				scope:recipient = {
					highest_held_title_tier = tier_barony
				}
			}
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.current_military_strength < scope:recipient.current_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}
		
		modifier = { # The AI will always use a Hook if they can
			scope:hook = yes
			add = 1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -5000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor = {
				is_at_war = yes
			}
			scope:recipient = {
				NOR = {
					scope:recipient = {
						is_imprisoned_by = scope:actor
					}
					scope:recipient = {
						highest_held_title_tier = tier_barony
					}
				}
			}
		}
	}
}
